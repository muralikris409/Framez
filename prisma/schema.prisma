generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" 
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid())
  username       String    @unique
  email          String    @unique
  password       String
  image     String?   // URL to profile picture
  bio            String?
  posts          Post[]
  comments       Comment[]
  likes          Like[]
  followers      Follower[] @relation("Followers")
  following      Follower[] @relation("Following")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
   conversations  ConversationParticipant[] 
  messages       Message[]   
}

model Post {
  id             String   @id @default(uuid())
  caption        String?
  imageUrl       String   
  authorId       String
  author         User     @relation(fields: [authorId], references: [id])
  comments       Comment[]
  likes          Like[] 
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Comment {
  id             String   @id @default(uuid())
  text           String
  authorId       String
  author         User     @relation(fields: [authorId], references: [id])
  postId         String
  post           Post     @relation(fields: [postId], references: [id])
  createdAt      DateTime @default(now())
}

model Like {
  id             String   @id @default(uuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  postId         String
  post           Post     @relation(fields: [postId], references: [id])
  createdAt      DateTime @default(now())
}

model Follower {
  id             String   @id @default(uuid())
  followerId     String
  followingId    String
  follower       User     @relation("Followers", fields: [followerId], references: [id])
  following      User     @relation("Following", fields: [followingId], references: [id])
  createdAt      DateTime @default(now())
}
model Conversation {
  id             String   @id @default(uuid())
  participants   ConversationParticipant[]
  messages       Message[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model ConversationParticipant {
  id             String   @id @default(uuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  createdAt      DateTime @default(now())
}

model Message {
  id             String   @id @default(uuid())
  text           String
  senderId       String
  sender         User     @relation(fields: [senderId], references: [id])
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  createdAt      DateTime @default(now())
}